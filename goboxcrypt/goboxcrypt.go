package goboxcrypt

import (
	"fmt"
)

/*
	Реалізація алгоритму шифрування
	з використанням S-блоків.
*/

// КОНСТАНТИ ІЗ ОРИГІНАЛЬНОЇ S-БЛОК ТАБЛИЦІ АЛГОРИТМУ AES
// FIPS-197 Figure 7. S-box substitution values in hexadecimal format. (original AES table)
var sbox0 = [256]byte{
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
}

// FIPS-197 Figure 14.  Inverse S-box substitution values in hexadecimal format.
var sbox1 = [256]byte{
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
}

// функція шифрування, для ключа використовуйту Hex число
func Encrypt_Sbox(plainText, key string) string {
	if len(key)%2 != 0 {
		key = "0" + key
	}

	var cipherText string

	blocks := splitIntoBlocks(plainText, "plain")
	blocksOfKey := splitIntoBlocks(key, "cipher")

	rounds := len(blocksOfKey)

	for i := 0; i < rounds; i++ {
		for j := 0; j < len(blocks); j++ {
			// підставляємо значення з Sbox таблиці та XOR з поточним блоком ключа
			blocks[j] = swap_S_box(blocks[j], "in") ^ blocksOfKey[i]
		}
	}
	// формування шифротексту шляхом приведення зашифрованих блоків до Гекс формату
	for _, block := range blocks {
		cipherText += fmt.Sprintf("%02x", block)
	}
	return cipherText
}

// функція повернення
func Decrypt_Sbox(cipherText, key string) string {
	if len(key)%2 != 0 {
		key = "0" + key
	}

	blocks := splitIntoBlocks(cipherText, "cipher")
	blocksOfKey := splitIntoBlocks(key, "cipher")

	rounds := len(blocksOfKey)

	// зворотня операція, використовуємо інвертовану таблицю S-блоків
	for i := rounds - 1; i >= 0; i-- {
		for j := 0; j < len(blocks); j++ {
			blocks[j] = swap_S_box(blocks[j]^blocksOfKey[i], "out")
		}
	}

	return string(blocks)
}

func swap_S_box(block byte, mode string) byte {
	// тетрада для старших чотирьох бітів
	nibble1 := (0xF0 & block) >> 4
	// тетрада для молодших чотирьох бітів
	nibble2 := 0x0F & block

	if mode == "in" {
		return sbox0[nibble1*16+nibble2]
	} else if mode == "out" {
		return sbox1[nibble1*16+nibble2]
	}
	return block
}

/*
	Реалізація алгоритму шифрування
	з використанням P-блоків
*/
// Будь-ласка використовуйте Hex значення для ваших ключів
func Encrypt_Pbox(plainText, key string) string {
	if len(key)%2 != 0 {
		key = "0" + key
	}

	var cipherText string

	blocks := splitIntoBlocks(plainText, "plain")
	blocksOfKey := splitIntoBlocks(key, "cipher")

	rounds := len(blocksOfKey)

	// перемішування блоків та XOR з наступними блоками ключа
	for i := 0; i < rounds; i++ {
		for j := 0; j < len(blocks); j++ {
			if i != 0 {
				blocks[j] = Permutate_P_box(blocks[j], "in") ^ blocksOfKey[i]
			} else {
				// перший раунд -> операція XOR для першого блоку ключа для всіх блоків тексту без пермішування
				blocks[j] = blocks[j] ^ blocksOfKey[i]
			}

		}
	}
	// формування шифротексту шляхом приведення зашифрованих блоків до Гекс формату
	for _, block := range blocks {
		cipherText += fmt.Sprintf("%02x", block)
	}
	return cipherText
}

// функція розшифрування
func Decrypt_Pbox(cipherText, key string) string {
	if len(key)%2 != 0 {
		key = "0" + key
	}

	blocks := splitIntoBlocks(cipherText, "cipher")
	blocksOfKey := splitIntoBlocks(key, "cipher")

	rounds := len(blocksOfKey)

	// зворотня операція "розмішування" результату XOR блоків з ключем
	for i := rounds - 1; i >= 0; i-- {
		for j := 0; j < len(blocks); j++ {
			if i != 0 {
				blocks[j] = Permutate_P_box(blocks[j]^blocksOfKey[i], "out")
			} else {
				// перший раунд алгоритму просто XOR без змішування
				blocks[j] = blocks[j] ^ blocksOfKey[i]
			}
		}
	}

	return string(blocks)
}

// функція для розбиття відкритого або шифро- тексту на блоки по 8 біт
func splitIntoBlocks(text string, mode string) []byte {
	// розбиття на 8-бітні блоки звичайного тексту
	if mode == "plain" {
		blocks := make([]byte, len(text))

		for i := 0; i < len(text); i++ {
			blocks[i] = text[i]
		}

		return blocks
		// розбиття на 8-бітні блоки шифротексту
	} else if mode == "cipher" {
		blocks := make([]byte, len(text)/2)

		for i := 0; i < len(text)/2; i++ {
			blocks[i] = byte(HexToInt(text[i*2 : i*2+2]))
		}
		return blocks
	}
	return make([]byte, 0)
}

func Permutate_P_box(block byte, mode string) byte {
	// тетрада для старших чотирьох бітів
	nibble1 := (0xF0 & block) >> 4
	// тетрада для молодших чотирьох бітів
	nibble2 := 0x0F & block
	//fmt.Printf("%04b\n", nibble1)
	nibble1 = shuffleBits(nibble1, mode)
	//fmt.Printf("%04b\n", nibble1)
	//fmt.Printf("%04b\n", nibble2)
	nibble2 = shuffleBits(nibble2, mode)
	//fmt.Printf("%04b\n", nibble2)
	return (nibble1 << 4) | nibble2
}

// функція перемішування/розмішування
func shuffleBits(num byte, mode string) byte {
	var bit1, bit2, bit3, bit4 byte
	if mode == "in" {
		// "змішаємо кожен біт тетради згідно з рисунком ../imgs/my_pbox_implementation.png"
		bit1 = (num & (1 << 0)) << 2 // переміщення 1-го біта на позицію 3
		bit2 = (num & (1 << 1)) >> 1 // переміщення 2-го біта на позицію 1
		bit3 = (num & (1 << 2)) << 1 // переміщення 3-го біта на позицію 4
		bit4 = (num & (1 << 3)) >> 2 // переміщення 4-го біта на позицію 2
	} else if mode == "out" {
		// "розмішаємо" позицію кожного біта назад
		bit1 = (num & (1 << 2)) >> 2 // переміщення 3-го біта (раніше 1-го) назад на позицію 1
		bit2 = (num & (1 << 0)) << 1 // переміщення 1-го біта (раніше 2-го) назад на позицію 2
		bit3 = (num & (1 << 3)) >> 1 // переміщення 4-го біта (раніше 3-го) назад на позицію 3
		bit4 = (num & (1 << 1)) << 2 // переміщення 2-го біта (раніше 4-го) назад на позицію 4
	}

	// Об'єднуємо біти разом
	return bit1 | bit2 | bit3 | bit4
}

/*
HELPERS
*/
func HexToInt(hex string) uint64 {
	if len(hex) > 16 {
		return 0
	}

	var result uint64

	for _, char := range hex {
		result = result << 4 // Переміщення на 4 біти вліво, резервуємо одне число 16 розряду -> 0001 0000
		switch {
		case '0' <= char && char <= '9':
			result += uint64(char - '0')
		case 'a' <= char && char <= 'f':
			result += uint64(char - 'a' + 10)
		case 'A' <= char && char <= 'F':
			result += uint64(char - 'A' + 10)
		default:
			return 0
		}
	}

	return result
}
